non-blocking : nodejs의 특성임. SJF와 비슷한 개념

http://111.111.111.111:8080 이런식으로 ip주소와 포트번호를 입력하면 타 컴퓨터에서 내 컴퓨터로 접속이 가능.

server.js 만들고 npm init -y
npm install express로 express 다운
nodemon 다운 : npm install -g nodemon


restAPI
1. 일관성있는 url이 좋다. , 하나의url+method는 하나의 데이터를 보내야 한다.
2. 유저에게 서버 역할을 맏기지 마라
3. 요청들은 서로 의존성이 없어야
4. 요청은 캐싱이 가능해야 한다.


삭제기능 정리
1. 새로고침없이 서버로 요청날리고 싶으면 AJAX 사용 
2. AJAX로 데이터도 가져올 수 있다보니까 클라이언트사이드 렌더링 가능
3. dataset 이용하면 html에 몰래 데이터 숨겨놓을 수 있음


1. Session방식이란?
유저가 입장권에 sessionid만 보냄
유저가 get이나 post요청 시 입장권 제시
db에서 조회함, 그 document에 아무런 이상이 없으면 통과
장점 : db를 요청마다 조회하기 때문에 엄격한 로그인 상태 체크가 가능하다
단점 : db조회를 많이하기 때문에 부담이 심함

흐름
    1. 로그인 성공하면 세션 document만들기
       쿠키를 유저에게 보내주기->passport.serializeUser()쓰면 자동임
    2. 유저가 쿠키 제출시 확인해보기 -->passport.deserializeUser()
    3. 현재 로그인된 유저정보 출력은 요청.user






2. JWT token방식 
유저자 로그인을 성공하면 유저에게 입장권을 발급해줌(아이디, 로그인날짜, 유효기간 등)
get, post요청 시 입장권 제출, 별 이상 없으면 통과
유저가 입장권을 위조한다면? -> 위조여부는 쉽게 알 수 있으므로 상관 없음

장점 : 유저가 많은 마이크로서비스 운영중이면 편함
단점 : 입장권을 다른사람이 훔쳐가면 그 사람이 로그인하는 것을 막을 수 없음

3. Oauth(소셜로그인)
A사이트회원 정보를 B사이트에서 사용



비밀번호를 해싱할 때 row하게 전체를 해싱하는것보다 salt라는 임의의 추가 문자를 더하여 해싱하면 더 안정적임

ex)sanggyeol1abc123 -> 해싱
여기서 sanggyeol1은 pw, abc123은 salt이다.
salt를 쓰면 lookup table attack 과 rainbow table attack을 방어할 수 있다.

환경변수를 다른 파일에 보관하려면?
npm install dotenv 설치, 
require('dotenv').config()//환경변수 다른 파일에 저장
.env파일 생성(env파일은 깃허브에 올리지 말자.)



aws 사용법
iam 검색, 사용자버튼 클릭 -> 사용자 생성 -> 권한옵션 -> 직접 정책 연결 -> s3검색 ->  AmazonS3FullAccess 선택 -> 생성
사용자 정보에서 엑세스 키 생성 -> 로컬 코드 선택, 태그입력x, 생성후
ARN과 엑세스 키, 비밀 엑세스 키 잘 저장해두기
s3검색 -> 버킷(하드디스크)만들기 -> 지역 서울선택, ACL비활성화
-> 퍼블릭 엑세스 차단 해제 -> 버킷만들기

버킷 권한설정 둘중하나
1. 버킷정책
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "1",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::님들버킷명/*"
        },
        {
            "Sid": "2",
            "Effect": "Allow",
            "Principal": {
                "AWS": "사용자ARN"
            },
            "Action": [
                "s3:PutObject",
                "s3:DeleteObject"
            ],
            "Resource": "arn:aws:s3:::님들버킷명/*"
        }
    ]
} //이거 복붙하면 됨
Sid : 1번은 모든 유저는 GET이 가능하고
2번은 관리자만 PUT, DELETE가 가능
- Actions 항목에서 자료 읽기는 s3:GetObject 쓰기는 s3:PutObject 삭제는 s3:DeleteObject
- Principal 항목은 어떤 유저인지 명시하는 부분인데 * 쓰면 모든유저, 특정 AWS 계정을 넣고 싶으면 ARN 주소 삽입. 둘째 Principal 항목엔 님들이 액세스 키 발급받았던 그 사용자 계정의 ARN삽입. 
- Resource는 어떤 버킷인지 버킷명 적으면 됨. 

2. ACL쓰거나(구)


버킷정책 저장 후 cors설정
[
    {
        "AllowedHeaders": [
            "*"
        ],
        "AllowedMethods": [
            "PUT",
            "POST"
        ],
        "AllowedOrigins": [
            "*"//실제서비스면 도메인com넣는게 좋음
        ],
        "ExposeHeaders": [
            "ETag"
        ]
    }
] 복붙

이미지 업로드 기능 : 
1. 글작성페이지에 이미지 input
2. 서버는 이미지받으면 S3에 업로드
3. 이미지 URL은 DB에 글과 함께 저장
4. 이미지 필요하면 DB에 있던 UR꺼내서 html에 넣기

서버에서는 npm install multer multer-s3 @aws-sdk/client-s3 설치(사용자가 업로드한 이미지를 잘 다루고 s3, aws에서 다룰수 있게 하는 라이브러리)


검색기능 : search index를 활용한다.
정규식의 부분검색기능과 이진탐색의 빠른 속도 두 마리의 토끼를 잡을 수 있음
mongodb Database -> search indexes -> create search index -> visual aditor ->
next -> name 은 title_index로 -> refine index로 커스텀 -> lucene.korean으로 바꿈(한국어 상 조사 등 불용어를 걸러냄) -> dynamic mapping 해제(모든 필드에 index만드는 기능) -> Field mapping 에서 title, string 선택(여기서 다른 필드도 인덱싱 선택 가능) -> 조금 기다리면 인덱스 생성됨 -> query누르면 검색테스트 가능(알아서 점수 높은 순으로 정렬)



채팅방 기능 : 
유저가 서버와 통신하는 방법 3가지
1. http - 편지
2. server sent 
    - 라디오같은것. 서버가 원할 때 유저에게 데이터 전송 가능, 일방향
    서버에서 유저에게 계속해서 데이터를 push해줘야 하는 서비스

3. websocket - 전화 
    - 실시간으로 유저와 서버가 상호 자유롭게 소통 가능
    - websocket으로 업그레이드 해줘야함

채팅기능
1. 글마다 채팅버튼 누르면 채팅방 생성(참여자1, 참여자2, 글id) 채팅메시지(부모채팅방id, 채팅내용, 보낸사람id, 보낸사람username)
2. 내가속한 채팅방 목록 페이지 
3. 채팅방 누르면 채팅방 상세페이지 보여줌
4. 메시지 전송시 상대에게 전달/db에 저장

websocket설치법 :
1. npm install socket.io@4
2. server.listen(process.env.PORT, ()=>{ app.listen에서 server.listen으로 바꾸기
3. 서버 상단에 추가
const { createServer } = require('http')
const { Server } = require('socket.io')
const server = createServer(app)
const io = new Server(server) 

4. html파일에도 socket.io설치(채팅방 상세페이지에 넣어줌)
<script src="https://cdn.jsdelivr.net/npm/socket.io@4.7.2/client-dist/socket.io.min.js"></script>
<script>
  const socket = io() 
</script>


실제 서비스는 socket.io + DB adapter쓰는게 좋음(공식문서 읽어보자)

